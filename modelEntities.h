#ifndef SUDOKULEVEL_H
#define SUDOKULEVEL_H

#include <QString>
#include <QVector>
#include "constants.h"
#include <memory>

//model entities
//ячейка игры
class Cell
{
public:
    Cell(int nRow, int nCol, bool bIsAutoGenerated = false)  : m_nRow(nRow),
                                                               m_nCol(nCol),
                                                               m_bIsAutoGenerated(bIsAutoGenerated){}

    bool operator == (const Cell& other) const{
        return m_nRow == other.m_nRow && m_nCol == other.m_nCol;
    }

    int GetRow() const {return m_nRow;}
    int GetColumn() const {return m_nCol;}
    bool IsAutoGenerated() const {return m_bIsAutoGenerated;}

    void SetValue(QString value) {m_value = value; }
    QString GetValue() const {return m_value; }

private:
    int m_nRow = NOT_FOUND;
    int m_nCol = NOT_FOUND;
    bool m_bIsAutoGenerated = false;
    QString m_value = 0;
};


//класс таблицы игры
class GameTable : public QVector<Cell>
{
public:

    Cell* getCell(int nRow, int nCol);
};

class LevelBuilder;


//базовый класс уровня сложности
class DifficultLvlBase {



public:

  void CreateNewGame(LevelBuilder* pBuilder);
  QString GetName() const {return QString::number(GetRowsCnt()) + " x " + QString::number(GetColumnsCnt());}

  GameTable& GetTable() {return  m_table;}
  const GameTable& GetTable() const {return  m_table;}

  virtual int GetCellCountingRowAndColumnForRegion() const = 0;
  virtual int GetDifficultValue() const = 0;
  virtual int GetRowsCnt() const = 0;
  virtual int GetColumnsCnt() const = 0;
  virtual int GetMaxValue() const = 0;

  virtual std::unique_ptr<DifficultLvlBase> Clone() const = 0;

  virtual ~DifficultLvlBase(){}

private:
   void Init();

   GameTable m_table; //матрица игры
};


//игра 4x4
class DifficultLvl_4_4 : public DifficultLvlBase {

public:
    int GetCellCountingRowAndColumnForRegion() const override {return 2;}
    int GetDifficultValue() const override {return 4;}
    int GetRowsCnt() const override {return 4;}
    int GetColumnsCnt() const override {return 4;}
    int GetMaxValue() const override {return 4;}
    std::unique_ptr<DifficultLvlBase> Clone() const override;
};

//игра 9x9
class DifficultLvl_9_9 : public DifficultLvlBase {

public:
    int GetCellCountingRowAndColumnForRegion() const override {return 3;}
    int GetDifficultValue() const override {return 9;}
    int GetRowsCnt() const override {return 9;}
    int GetColumnsCnt() const override {return 9;}
    int GetMaxValue() const override {return 9;}
    std::unique_ptr<DifficultLvlBase> Clone() const override;
};

//игра 16x16
class DifficultLvl_16_16 : public DifficultLvlBase {

public:
    int GetCellCountingRowAndColumnForRegion() const override {return 4;}
    int GetDifficultValue() const override{return 16;}
    int GetRowsCnt() const override{return 16;}
    int GetColumnsCnt() const override{return 16;}
    int GetMaxValue() const override {return 16;}
    std::unique_ptr<DifficultLvlBase> Clone() const override;
};









#endif // SUDOKULEVEL_H
