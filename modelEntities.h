#ifndef SUDOKULEVEL_H
#define SUDOKULEVEL_H

#include <QString>
#include <QVector>
#include "constants.h"



//model entities
//ячейка игры
class Cell
{
public:
    Cell(int nRow, int nCol, bool bIsAutoGenerated = false) noexcept : m_nRow(nRow),
                                                                       m_nCol(nCol),
                                                                       m_bIsAutoGenerated(bIsAutoGenerated){}

    bool operator == (const Cell& other) const{
        return m_nRow == other.m_nRow && m_nCol == other.m_nCol;
    }

    int GetRow() const{return m_nRow;}
    int GetColumn() const{return m_nCol;}
    bool IsAutoGenerated() const{return m_bIsAutoGenerated;}

    void SetValue(uint value){m_value = value; }
    uint GetValue() const {return m_value; }

private:
    int m_nRow = NOT_FOUND;
    int m_nCol = NOT_FOUND;
    bool m_bIsAutoGenerated = false;
    uint m_value = 0;
};


//уровень игры
class SudokuLevel
{
public:

    SudokuLevel(const QString& name, int difficultValue);

    bool operator == (const QString& lvlName) const
    {
        return m_name.toUpper() == lvlName.toUpper();
    }


    QString GetName() const {return m_name;}
    int GetDifficultValue() const {return m_difficultValue;}
    int GetRowsCnt() const {return m_rowsCnt;}
    int GetColumnsCnt() const {return m_columnsCnt;}
    bool IsAutoGeneratedItem(int nRow, int nCol) const;

    bool GetItemValue(int nRow, int nCol, uint& outValue) const;
    void SetItemValue(int nRow, int nCol, const uint value);

    void Init();

private:

    bool GetRequiredCell(int nRow, int nCol, Cell*& outCell) const;

    QString m_name; //имя уровня
    int m_difficultValue = 0;//сложность уровня
    int m_columnsCnt = 0; //количество столбцов
    int m_rowsCnt = 0;//количество строк

    mutable QVector<Cell> m_table; //матрица игры

};

#endif // SUDOKULEVEL_H
